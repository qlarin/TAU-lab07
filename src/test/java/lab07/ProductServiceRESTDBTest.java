package lab07;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.RestAssured.when;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.math.BigDecimal;

import org.dbunit.Assertion;
import org.dbunit.IDatabaseTester;
import org.dbunit.JdbcDatabaseTester;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.ITable;
import org.dbunit.dataset.filter.DefaultColumnFilter;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.dbunit.ext.hsqldb.HsqldbDataTypeFactory;

import lab07.domain.Product;
import com.jayway.restassured.RestAssured;

public class ProductServiceRESTDBTest {

    private static IDatabaseConnection connection;
    private static IDatabaseTester databaseTester;

    @BeforeClass
    public static void setUp() throws Exception {
        RestAssured.baseURI = "http://localhost";
        RestAssured.port = 8080;
        RestAssured.basePath = "/lab07";

        Connection jdbcConnection = DriverManager.getConnection(
            "jdbc:hsqldb:hsql://localhost/workdb", "sa", "");

        try (Statement st = jdbcConnection.createStatement()) {
            st.executeUpdate("DROP TABLE Product");
            st.executeUpdate("CREATE TABLE if not exists Product(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), price DECIMAL(10,2), category varchar(20))");
        }
        jdbcConnection.commit();

        connection = new DatabaseConnection(jdbcConnection);

        DatabaseConfig dbConfig = connection.getConfig();
        dbConfig.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new HsqldbDataTypeFactory());

        databaseTester = new JdbcDatabaseTester(
            "org.hsqldb.jdbcDriver", "jdbc:hsqldb:hsql://localhost/workdb", "sa", "");

        IDataSet dataSet = new FlatXmlDataSetBuilder().build(
            new FileInputStream("src/test/resources/fullData.xml"));
            
        databaseTester.setSetUpOperation(DatabaseOperation.CLEAN_INSERT);
        databaseTester.setDataSet(dataSet);
        databaseTester.onSetup();
        databaseTester.setTearDownOperation(DatabaseOperation.DELETE_ALL);
    }

    @Test
    public void getAllProducts() throws Exception {

        IDataSet dbDataSet = connection.createDataSet();
		ITable actualTable = dbDataSet.getTable("PRODUCT");
		ITable filteredTable = DefaultColumnFilter.excludedColumnsTable(actualTable, new String[]{"ID"});

        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(
            new File("src/test/resources/fullData.xml"));   
        ITable expectedTable = expectedDataSet.getTable("PRODUCT");

        Assertion.assertEquals(expectedTable, filteredTable);
    }

    @Test
    public void addProduct() throws Exception {
        Product aProduct = new Product();
        aProduct.setName("pamiec");
        aProduct.setPrice(new BigDecimal(111.20));
        aProduct.setCategory(Product.Category.valueOf("MEMORY"));
        
        given()
        .contentType("application/json")
        .body(aProduct)
        .when().post("/products")
        .then()
        .statusCode(201);

        IDataSet dbDataSet = connection.createDataSet();
        ITable actualTable = dbDataSet.getTable("PRODUCT");
        ITable filteredTable = DefaultColumnFilter.excludedColumnsTable(actualTable, new String[]{"ID"});
        
        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(
            new File("src/test/resources/productData.xml"));
        ITable expectedTable = expectedDataSet.getTable("PRODUCT");
        
        Assertion.assertEquals(expectedTable, filteredTable);
    }

    @AfterClass
    public static void tearDown() throws Exception {
        databaseTester.onTearDown();
    }

}


