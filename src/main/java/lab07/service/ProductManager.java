package lab07.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import lab07.domain.Product;

public class ProductManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PRODUCT = "CREATE TABLE Product(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), price DECIMAL(10,2), category varchar(20))";

    private PreparedStatement addProductStmt;
	private PreparedStatement deleteAllProductsStmt;
	private PreparedStatement getAllProductsStmt;
	private PreparedStatement getProductByIdStmt;
	private PreparedStatement getProductByPriceStmt;
	private PreparedStatement getProductByNameStmt;
	private PreparedStatement updateProductStmt;
	private PreparedStatement deleteProductStmt;

	private Statement statement;

	public ProductManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Product".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PRODUCT);

			addProductStmt = connection
				.prepareStatement("INSERT INTO Product (name, price, category) VALUES (?, ?, ?)");
			deleteAllProductsStmt = connection
				.prepareStatement("DELETE FROM Product");
			getAllProductsStmt = connection
				.prepareStatement("SELECT id, name, price, category FROM Product");
			getProductByIdStmt = connection
				.prepareStatement("SELECT id, name, price, category FROM Product where id = ?");
			getProductByPriceStmt = connection
				.prepareStatement("SELECT id, name, price, category FROM Product where price >= ? and price <= ?");
			getProductByNameStmt = connection
				.prepareStatement("SELECT id, name, price, category FROM Product where name = ?");
			updateProductStmt = connection
				.prepareStatement("UPDATE Product SET name = ?, price = ?, category = ? where id = ?");
			deleteProductStmt = connection
				.prepareStatement("DELETE FROM Product where id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public List<Product> prepareProducts(ResultSet rs, List<Product> products) throws SQLException {
		while (rs.next()) {
				Product p = new Product();
				p.setId(rs.getLong("id"));
				p.setName(rs.getString("name"));
				p.setPrice(rs.getBigDecimal("price"));
				p.setCategory(Product.Category.valueOf(rs.getString("category").toString()));
				products.add(p);
			}
		return products;
	}

    public List<Product> getAllProducts() {
		List<Product> products = new ArrayList<Product>();

		try {
			ResultSet rs = getAllProductsStmt.executeQuery();
			products = prepareProducts(rs, products);

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return products;
	}

	public int addProduct(Product product) {
		int count = 0;
		try {
			addProductStmt.setString(1, product.getName());
			addProductStmt.setBigDecimal(2, product.getPrice());
			addProductStmt.setString(3, product.getCategory().name());
			count = addProductStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public Product getProduct(Long id) {
		Product p = new Product();
		try {
			getProductByIdStmt.setLong(1, id);
			ResultSet rs = getProductByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getLong("id"));
				p.setName(rs.getString("name"));
				p.setPrice(rs.getBigDecimal("price"));
				p.setCategory(Product.Category.valueOf(rs.getString("category").toString()));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return p;
	}

	public List<Product> getProductByPrice(BigDecimal min, BigDecimal max) {
		List<Product> products = new ArrayList<Product>();

		try {
			getProductByPriceStmt.setBigDecimal(1, min);
			getProductByPriceStmt.setBigDecimal(2, max);
			ResultSet rs = getProductByPriceStmt.executeQuery();
			products = prepareProducts(rs, products);

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return products;
	}

	public List<Product> getProductByName(String name) {
		List<Product> products = new ArrayList<Product>();

		try {
			getProductByNameStmt.setString(1, name);
			ResultSet rs = getProductByNameStmt.executeQuery();
			products = prepareProducts(rs, products);

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return products;
	}

	public void updateProduct(Long id, Product product) {
		try {
			updateProductStmt.setString(1, product.getName());
			updateProductStmt.setBigDecimal(2, product.getPrice());
			updateProductStmt.setString(3, product.getCategory().name());
			updateProductStmt.setLong(4, id);
			updateProductStmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void deleteProduct(Long id) {
		try {
			deleteProductStmt.setLong(1, id);
			deleteProductStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
